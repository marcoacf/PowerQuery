let

    funcao = 
    // ------------------------------------------------------------------- INICIO DA FUNCAO -------------------------------------------------------------------
        (
            Estruturas as table,
            ProdutosExplodir as list
        ) =>

        let

            TabelaExplodir = 
                let
                    ListaProdutosBuffer = List.Buffer(ProdutosExplodir),
                    FonteBuffer = Table.Buffer(Estruturas),
                    SomenteProdutosSelecionados = Table.SelectRows(FonteBuffer, each List.Contains(ListaProdutosBuffer, [PRODUTO]) ),
                    DuplicarColuna = Table.DuplicateColumn(SomenteProdutosSelecionados, "COMPONENTE", "NivelComponente"),
                    RenomearColunasExplodir = Table.RenameColumns(DuplicarColuna,{{"PRODUTO", "ProdutoFim"}, {"COMPONENTE", "NivelProduto"}, {"QTD", "NivelQtd"}})
                in
                    RenomearColunasExplodir,

            Saida =
                (
                    TabelaInicial as table,
                    optional Loops as number,
                    optional ListaComprasInicial as table
                ) => 
                let
                    i = 
                        if Loops = null 
                        then 1 
                        else Loops+1,
                    Fonte = TabelaInicial,
                    ProcurarAberturaEstrutura = Table.NestedJoin(Fonte, {"NivelComponente"}, Estruturas, {"PRODUTO"}, "TabelaEstruturas", JoinKind.LeftOuter),
                    TabelaEstruturasExpandido = Table.ExpandTableColumn(ProcurarAberturaEstrutura, "TabelaEstruturas", {"PRODUTO", "COMPONENTE", "QTD"}, {"TabelaEstruturas.PRODUTO", "TabelaEstruturas.COMPONENTE", "TabelaEstruturas.QTD"}),

                    // Inicio da Lista de Compras,
                    SomenteProdutosSemRecursividade = Table.SelectRows(TabelaEstruturasExpandido, each ([TabelaEstruturas.QTD] = null)),
                    SelecionarSomenteColunasUsadas = Table.SelectColumns(SomenteProdutosSemRecursividade,{"ProdutoFim", "NivelProduto", "NivelComponente", "NivelQtd"}),
                    ListaCompra = 
                        if i = 1 
                        then SelecionarSomenteColunasUsadas
                        else Table.Combine({ListaComprasInicial, SelecionarSomenteColunasUsadas}),

                    // Produtos com recursividade => preparar Loop
                    SomenteProdutosComRecursividade = Table.SelectRows(TabelaEstruturasExpandido, each ([TabelaEstruturas.QTD] <> null)),
                    MultiplicarQuantidades = Table.AddColumn(SomenteProdutosComRecursividade, "QTD_Loop", each [NivelQtd] * [TabelaEstruturas.QTD], type number),
                    EscolherColunasVoltar = Table.SelectColumns(MultiplicarQuantidades,{"ProdutoFim", "TabelaEstruturas.PRODUTO", "TabelaEstruturas.COMPONENTE", "QTD_Loop"}),
                    VoltarLoop = Table.RenameColumns(EscolherColunasVoltar,{{"TabelaEstruturas.PRODUTO", "NivelProduto"}, {"TabelaEstruturas.COMPONENTE", "NivelComponente"}, {"QTD_Loop", "NivelQtd"}}),
                    out = 
                        if Table.RowCount(VoltarLoop) > 0 
                        then @Saida(VoltarLoop, i, ListaCompra) 
                        else ListaCompra 
                in
                    out

        in 
            Saida(TabelaExplodir)

        // ------------------------------------------------------------------- FIM DA FUNCAO -------------------------------------------------------------------

            , metadados = [
                Documentation.Name  = "RecursividadeEstrutura",
                Documentation.Description = "
                    by Joviano Silveira (www.joviano.com)
                    Essa função explode a estrutura do produto, encontrando o ultimo nivel do produto dela, ou seja, a lista de compras de materiais para fazer cada produto. ===ATENÇÃO=== a tabela tem que conter esses campos, com exatamente esses nomes: PRODUTO, COMPONENTE, QTD
                ",
                
                Documentation.Examples = {

                    // exemplo 01
                    [
                        Description = "descricao do exemplo 1",
                        Code = "
                        
                            RecursividadeEstrutura(                            
                                Table.FromRecords({
                                    [PRODUTO = 100001, COMPONENTE = 200001, QTD = 2],
                                    [PRODUTO = 100001, COMPONENTE = 500001, QTD = 1],
                                    [PRODUTO = 100001, COMPONENTE = 500002, QTD = 3],
                                    [PRODUTO = 100002, COMPONENTE = 200001, QTD = 4],
                                    [PRODUTO = 100002, COMPONENTE = 500001, QTD = 6],
                                    [PRODUTO = 100002, COMPONENTE = 500002, QTD = 2],
                                    [PRODUTO = 200001, COMPONENTE = 500003, QTD = 1],
                                    [PRODUTO = 200001, COMPONENTE = 500004, QTD = 5]
                                }),
                                {100001, 100002}
                            )                        
                          
                        ",
                        Result = "
                            ProdutoFim  | NivelProduto | NivelComponente | NivelQtd
                            100001      | 500001       | 500001          | 1
                            100002      | 500001       | 500001          | 6
                            100001      | 500002       | 500002          | 3
                            100002      | 500002       | 500002          | 2
                            100001      | 200001       | 500003          | 2
                            100002      | 200001       | 500003          | 4
                            100001      | 200001       | 500004          | 10
                            100002      | 200001       | 500004          | 20                    
                        "
                    ]

                }
            ]

in

    Value.ReplaceType(
        funcao,
        Value.ReplaceMetadata(
            Value.Type(funcao),metadados
        )
    )
